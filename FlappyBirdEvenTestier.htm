<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/html">
<head>
    <meta name="viewport"/>
    <title>Flappy Bird</title>
    <style>
        #gameArea {
            position: absolute;
            border:1px solid #c15656;
            background-color: #ec1010;
            left: 50%;
            right: 50%;
        }
        #gameCanvas {
            left: 100%;
            right: 100%;
            border:1px solid #d3d3d3;
            background-color: #f1f1f1
        }
    </style>
</head>
<body>
    <div id = "gameArea">

        <canvas id = "gameCanvas"></canvas>
        <script>
            var gameCanvas = document.getElementById('gameCanvas');
            var ctx = gameCanvas.getContext("2d");

            var x = gameCanvas.width / 2;
            var y = gameCanvas.height - 30;
            var dx = 2;
            var dy = -2;
            var ballRadius = 10;
            var paddleHeight = 10;
            var paddleWidth = 75;
            var paddleX = (gameCanvas.width - paddleWidth) / 2
            var leftPressed = false;
            var rightPressed = false;
            var brickRowCount = 3;
            var brickColumnCount = 5;
            var brickWidth = 75;
            var brickHeight = 20;
            var brickPadding = 10;
            var brickOffsetTop = 30;
            var brickOffsetLeft = 30;
            var score = 0;
            var lives = 3;

            var bricks = [];
            for (var c = 0; c < brickColumnCount; c++) {
                bricks[c] = [];
                for (var r = 0; r < brickRowCount; r++) {
                    bricks[c][r] = {x: 0, y: 0, status: 1};
                }
            }

            resizeGame();
            function resizeGame() {
                var gameArea = document.getElementById('gameArea');
                var widthToHeight = 4 / 3;
                var newWidth = window.innerWidth - 20;
                var newHeight = window.innerHeight - 20;
                var newWidthToHeight = newWidth / newHeight;

                if (newWidthToHeight > widthToHeight) {
                    newWidth = newHeight * widthToHeight;
                    gameArea.style.height = newHeight + 'px';
                    gameArea.style.width = newWidth + 'px';
                } else {
                    newHeight = newWidth / widthToHeight;
                    gameArea.style.width = newWidth + 'px';
                    gameArea.style.height = newHeight + 'px';
                }

                gameArea.style.marginLeft = (-newWidth / 2) + 'px';

                gameCanvas.width = newWidth;
                gameCanvas.height = newHeight;
            }

            window.addEventListener('resize', resizeGame, false);
            window.addEventListener('orientationchange', resizeGame, false);
            document.addEventListener("keydown", keyDownHandler, false);
            document.addEventListener("keyup", keyUpHandler, false);

            function keyDownHandler(e) {
                if (e.key === "Right" || e.key === "ArrowRight") {
                    rightPressed = true;
                } else if (e.key === "Left" || e.key === "ArrowLeft") {
                    leftPressed = true;
                }
            }

            function keyUpHandler(e) {
                if (e.key === "Right" || e.key === "ArrowRight") {
                    rightPressed = false;
                } else if (e.key === "Left" || e.key === "ArrowLeft") {
                    leftPressed = false;
                }
            }

            document.addEventListener("mousemove", mouseMoveHandler, false);

            function mouseMoveHandler(e){
                var relativeX = e.clientX - gameCanvas.offsetLeft;
                if(relativeX > 0 && relativeX < gameCanvas .offsetWidth){
                    paddleX = relativeX - paddleWidth/2
                }
            }

            function collisionDetection() {
                for (var c = 0; c < brickColumnCount; c++) {
                    for (var r = 0; r < brickRowCount; r++) {
                        var b = bricks[c][r]
                        if (b.status === 1) {
                            if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) {
                                dy = -dy;
                                b.status = 0;
                                score++;
                                if(score == brickRowCount * brickColumnCount) {
                                    alert("YOU WIN, CONGRATULATIONS!");
                                    document.location.reload();

                                }
                            }
                        }
                    }
                }
            }



            function drawScore() {
                ctx.font = "16px Arial";
                ctx.fillStyle = "#0095DD"
                ctx.fillText("Score: "+score, 8, 20);
            }

            function drawLives() {
                ctx.font = "16px Arial";
                ctx.fillStyle = "#0095DD"
                ctx.fillText("Lives: "+lives, gameCanvas.width - 65, 20);
            }

            function drawBricks() {
                for (var c = 0; c < brickColumnCount; c++) {
                    for (var r = 0; r < brickRowCount; r++) {
                        if (bricks[c][r].status === 1) {
                            var brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;
                            var brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;
                            bricks[c][r].x = brickX;
                            bricks[c][r].y = brickY;
                            ctx.beginPath();
                            ctx.rect(brickX, brickY, brickWidth, brickHeight);
                            ctx.fillStyle = "#0095DD";
                            ctx.fill();
                            ctx.closePath();
                        }
                    }
                }
            }

            function drawBall() {
                ctx.beginPath();
                ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
                ctx.fillStyle = "#0095dd";
                ctx.fill();
                ctx.closePath();
            }

            function drawPaddle() {
                ctx.beginPath();
                ctx.rect(paddleX, gameCanvas.height - paddleHeight, paddleWidth, paddleHeight);
                ctx.fillStyle = "#0095DD";
                ctx.fill();
                ctx.closePath();
            }

            function draw() {
                ctx.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
                drawBall();
                drawBricks();
                drawPaddle();
                drawScore();
                collisionDetection();
                drawLives();
                x += dx;
                y += dy;
                if (y + dy < ballRadius) {
                    dy = -dy;
                } else if (y + dy > gameCanvas.height - ballRadius) {
                    if (x > paddleX && x < paddleX + paddleWidth) {
                        dy = -dy;
                    } else {
                        lives--;
                        if(!lives) {
                            alert("GAME OVER");
                            document.location.reload();
                        }
                        else {
                            x = gameCanvas.width/2;
                            y = gameCanvas.height-30;
                            dx = 2;
                            dy = -2;
                            paddleX = (gameCanvas.width-paddleWidth)/2;
                        }
                    }
                }
                if (x + dx > gameCanvas.width - ballRadius || x + dx < ballRadius) {
                    dx = -dx;
                }
                if (rightPressed) {
                    paddleX += 7;
                    if (paddleX + paddleWidth > gameCanvas.width) {
                        paddleX = gameCanvas.width - paddleWidth;
                    }
                } else if (leftPressed) {
                    paddleX -= 7;
                    if (paddleX < 0) {
                        paddleX = 0;
                    }
                }
                requestAnimationFrame(draw);
            }


            draw();
        </script>
    </div>
</body>
</html>
