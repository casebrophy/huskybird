<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<style>
    #canvas {
        left: 100%;
        right: 100%;
        border:1px solid #d3d3d3;
        background-color: #f1f1f1
    }

    #gameArea {
        position: absolute;
        border:1px solid #c15656;
        left: 50%;
        right: 50%;
    }

.button {
  border: none;
  color: white;
  padding: 16px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  transition-duration: 0.4s;
  cursor: pointer;
}

.button1 {
  background-color: #FFFFE0;
  border-radius: 40px;
  color: black;
  border: 4px solid black;
  padding: 20px;
  text-align:center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  position: relative; left:250px;
}

.button1:hover {
  background-color: #EE0000;
  color: white;
}
</style>
</head>
<body onload="startGame()">
    <div id = "gameArea">
        <canvas id="canvas"></canvas>
        <script>

var myGamePiece;
var myObstacles = [];
var myScore;
var myHighScore;
var spacePressed;
var jumpSound;
var deathSound;

function startGame() {
    myGamePiece = new component(30, 30, "black", 10, 120);
    myGamePiece.gravity = 0.10;
	myGamePiece.life = 1;
    myScore = new component("12px", "Verdana", "black", 350, 25, "text");
	jumpSound = new sound("bark.mp3");
	deathSound = new sound("bonk.mp3");
    myGameArea.start();
}

document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);

function keyDownHandler(e) {
    if(e.keyCode === 32){
        spacePressed = true;
    }
}
function keyUpHandler(e) {
    if(e.keyCode === 32){
        spacePressed = false;
    }
}





var myGameArea = {
    canvas : document.getElementById("canvas"),
    gameArea: document.getElementById("gameArea"),
    start : function() {
        this.canvas.style = "border:3px solid black;";
        this.resize();
        this.canvas.offsetTop = 50;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        updateGameArea();
    },
    resize : function ()
    {
        var widthToHeight = 16 / 9;
        var newWidth = window.innerWidth - window.innerWidth * .03;
        var newHeight = window.innerHeight - window.innerHeight * .03;
        var newWidthToHeight = newWidth / newHeight;

        //keeps the game's aspect ratio
        if (newWidthToHeight > widthToHeight) {
            newWidth = newHeight * widthToHeight;
            this.gameArea.style.height = newHeight + 'px';
            this.gameArea.style.width = newWidth + 'px';
        } else {
            newHeight = newWidth / widthToHeight;
            this.gameArea.style.width = newWidth + 'px';
            this.gameArea.style.height = newHeight + 'px';
        }
        //keeps the gameArea in the center of the screen when resizing
        this.gameArea.style.marginLeft = (-newWidth / 2) + 'px';

        this.canvas.width = newWidth;
        this.canvas.height = newHeight;


        var scaleFactorX = this.canvas.width/480
        var scaleFactorY = this.canvas.height/270

        ctx.scale(scaleFactorX, scaleFactorY);
    },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}
window.addEventListener('resize', myGameArea.resize, false);
window.addEventListener('fullscreenchange', myGameArea.resize, false)
window.addEventListener('orientationchange', myGameArea.resize, false);

function component(width, height, color, x, y, type) {
    this.type = type;
    this.score = 0;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;
    this.x = x;
    this.y = y;
    this.gravity = 0;
    this.gravitySpeed = 0;
    this.update = function() {
        if(spacePressed)
        {
            accelerate(-.4)
            jumpSound.play();
        }
        if(!spacePressed)
        {
            accelerate(.1)
        }
        ctx = myGameArea.context;
        if (this.type === "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
    }

    this.crashWith = function(otherobj) {
        var bottom = myGameArea.canvas.height - this.height;
        var top = 0
        var myleft = this.x;
        var myright = this.x + (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if(this.y > bottom || mytop < top){
            return true;
        }
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
}

function updateGameArea() {
    //listens for window resize even

    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
    for (i = 0; i < myObstacles.length; i += 1) {
        if (myGamePiece.crashWith(myObstacles[i])) {
            if (myGamePiece.life == 1) {
                myGamePiece.life = 0;
                deathSound.play();
                myMessage.text="You crashed! Press SPACE to try again!"
                myMessage.update();
            }
            if (spacePressed) {
                window.location.reload();
            }
            return;
        }
    }

    for (i = 0; i < scoreObstacles.length; i++) {
        if (myGamePiece.crashWith(scoreObstacles[i])) {
            score++;
        }
    }


    myGameArea.clear();
    myGameArea.frameNo += 1;
    if (myGameArea.frameNo === 1 || everyinterval(150)) {
        x = myGameArea.canvas.width;
        minHeight = 45;
        maxHeight = 225;
        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
        minGap = 90;
        maxGap = 150;
        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
        myObstacles.push(new component(70, height, "yellow", x, 0));
        myObstacles.push(new component(70, x - height - gap, "yellow", x, height + gap));
        scoreObstacles.push(new component(70, gap, "#ffffff00", x, height));
    }
    for (i = 0; i < myObstacles.length; i += 1) {
        myObstacles[i].x += -1.5;
        myObstacles[i].update();
    }
    for(i = 0; i, i <scoreObstacles.length; i++){
        scoreObstacles[i].x += -1.5;
        scoreObstacles[i].update();
    }
    myScore.text="SCORE: " + Math.round(score/67);
    myScore.update();
    myGamePiece.newPos();
    myGamePiece.update();
}

function sound(src) {
    this.sound = document.createElement("audio");
    this.sound.src = src;
    this.sound.setAttribute("preload", "auto");
    this.sound.setAttribute("controls", "none");
    this.sound.style.display = "none";
    document.body.appendChild(this.sound);
    this.play = function(){
        this.sound.play();
    }
    this.stop = function(){
        this.sound.pause();
    }
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 === 0) {return true;}
    return false;
}

function accelerate(n) {
    if (!myGameArea.interval) {
        myGameArea.interval = setInterval(updateGameArea, 20);
    }

    myGamePiece.gravity = n;


}
        </script>


    </div>

</body>
</html>