<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<style>
    #gameCanvas {
        left: 100%;
        right: 100%;
        border:1px solid #d3d3d3;
        background-color: #f1f1f1
    }

    #gameArea {
        position: absolute;
        border:1px solid #c15656;
        background-color: #ec1010;
        left: 50%;
        right: 50%;
    }

.button {
  border: none;
  color: white;
  padding: 16px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  transition-duration: 0.4s;
  cursor: pointer;
}

.button1 {
  background-color: #FFFFE0;
  border-radius: 40px;
  color: black;
  border: 4px solid black;
  padding: 20px;
  text-align:center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  position: relative; left:250px;
}

.button1:hover {
  background-color: #EE0000;
  color: white;
}
</style>
</head>
<body onload="startGame()">
    <div id = "gameArea">
        <canvas id="gameCanvas"></canvas>
        <script>

var myGamePiece;
var myObstacles = [];
var myScore;
var myHighScore;
var spacePressed;
var jumpSound;
var deathSound;

function startGame() {
    myGamePiece = new component(30, 30, "black", 10, 120);
    myGamePiece.gravity = 0.10;
	myGamePiece.life = 1;
    myScore = new component("12px", "Verdana", "black", 350, 25, "text");
	jumpSound = new sound("bark.mp3");
	deathSound = new sound("bonk.mp3");
    myGameArea.start();
}

document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);

function keyDownHandler(e) {
    if(e.keyCode === 32){
        spacePressed = true;
    }
}
function keyUpHandler(e) {
    if(e.keyCode === 32){
        spacePressed = false;
    }
}

var gameCanvas = document.getElementById('gameCanvas');
var ctx = gameCanvas.getContext("2d");



resizeGame();
function resizeGame() {

    var gameArea = document.getElementById('gameArea');
    var widthToHeight = 16 / 9;
    var newWidth = window.innerWidth - window.innerWidth * .03;
    var newHeight = window.innerHeight - window.innerHeight * .03;
    var newWidthToHeight = newWidth / newHeight;

    //keeps the game's aspect ratio
    if (newWidthToHeight > widthToHeight) {
        newWidth = newHeight * widthToHeight;
        gameArea.style.height = newHeight + 'px';
        gameArea.style.width = newWidth + 'px';
    } else {
        newHeight = newWidth / widthToHeight;
        gameArea.style.width = newWidth + 'px';
        gameArea.style.height = newHeight + 'px';
    }
    //keeps the gameArea in the center of the screen when resizing
    gameArea.style.marginLeft = (-newWidth / 2) + 'px';

    gameCanvas.width = newWidth;
    gameCanvas.height = newHeight;


    var scaleFactorX = gameCanvas.width/480
    var scaleFactorY = gameCanvas.height/270

    ctx.scale(scaleFactorX, scaleFactorY);
}
//listens for window resize even
window.addEventListener('resize', resizeGame, false);
window.addEventListener('fullscreenchange', resizeGame, false)
window.addEventListener('orientationchange', resizeGame, false);



var myGameArea = {
    start : function() {
        this.frameNo = 0;
        updateGameArea();
    },
    clear : function() {
        this.context.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
    }
}

            function component(width, height, color, x, y, type) {
                this.type = type;
                this.score = 0;
                this.width = width;
                this.height = height;
                this.speedX = 0;
                this.speedY = 0;
                this.x = x;
                this.y = y;
                this.gravity = 0;
                this.gravitySpeed = 0;
                this.update = function() {
                    if(spacePressed)
                    {
                        accelerate(-.4)
                        jumpSound.play();
                    }
                    if(!spacePressed)
                    {
                        accelerate(.1)
                    }
                    if (this.type === "text") {
                        ctx.font = this.width + " " + this.height;
                        ctx.fillStyle = color;
                        ctx.fillText(this.text, this.x, this.y);
                    } else {
                        ctx.beginPath();
                        ctx.fillStyle = color;
                        ctx.fillRect(this.x, this.y, this.width, this.height);
                        ctx.closePath();
                    }
                }
                this.newPos = function() {
                    this.gravitySpeed += this.gravity;
                    this.x += this.speedX;
                    this.y += this.speedY + this.gravitySpeed;
                }

                this.crashWith = function(otherobj) {
                    var bottom = gameCanvas.height - this.height;
                    var top = 0
                    var myleft = this.x;
                    var myright = this.x + (this.width);
                    var mytop = this.y;
                    var mybottom = this.y + (this.height);
                    var otherleft = otherobj.x;
                    var otherright = otherobj.x + (otherobj.width);
                    var othertop = otherobj.y;
                    var otherbottom = otherobj.y + (otherobj.height);
                    var crash = true;
                    if(this.y > bottom || mytop < top){
                        return true;
                    }
                    if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
                        crash = false;
                    }
                    return crash;
                }
            }

            function updateGameArea() {
                var x, height, gap, minHeight, maxHeight, minGap, maxGap;
                for (i = 0; i < myObstacles.length; i += 1) {
                    if (myGamePiece.crashWith(myObstacles[i])) {
                        if (myGamePiece.life === 1) {
                            myGamePiece.life = 0;
                            deathSound.play();
                        }
                        return;
                    }
                }


                myGameArea.clear();
                myGameArea.frameNo += 1;
                if (myGameArea.frameNo === 1 || everyinterval(150)) {
                    x = gameCanvas.width;
                    minHeight = 45;
                    maxHeight = 225;
                    height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
                    minGap = 90;
                    maxGap = 150;
                    gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
                    myObstacles.push(new component(70, height, "yellow", x, 0));
                    myObstacles.push(new component(70, x - height - gap, "yellow", x, height + gap));
                }
                for (i = 0; i < myObstacles.length; i += 1) {
                    myObstacles[i].x += -1.5;
                    myObstacles[i].update();
                }
                myScore.text="SCORE: " + myGameArea.frameNo;
                myScore.update();
                myGamePiece.newPos();
                myGamePiece.update();
            }

            function sound(src) {
                this.sound = document.createElement("audio");
                this.sound.src = src;
                this.sound.setAttribute("preload", "auto");
                this.sound.setAttribute("controls", "none");
                this.sound.style.display = "none";
                document.body.appendChild(this.sound);
                this.play = function(){
                    this.sound.play();
                }
                this.stop = function(){
                    this.sound.pause();
                }
            }

            function everyinterval(n) {
                if ((myGameArea.frameNo / n) % 1 === 0) {return true;}
                return false;
            }

            function accelerate(n) {
                if (!myGameArea.interval) {myGameArea.interval = setInterval(updateGameArea, 20);}

                myGamePiece.gravity = n;
            }

        </script>


    </div>

    <br>

    <p style = "font-family:Arial, Helvetica, sans-serif;font-size:16px;font-style:normal;">
        Press <b>SPACE</b> to jump!  Avoid the obstacles and don't go out of bounds</p>

    <button class="button button1" onClick="window.location.reload();">Restart</button>
</body>
</html>